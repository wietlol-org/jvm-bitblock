package me.wietlol.bitblock.codegenerator.generators.kotlin

import me.wietlol.bitblock.api.registry.ModelRegistry
import me.wietlol.bitblock.api.registry.ModelRegistryKey
import me.wietlol.bitblock.api.registry.RegistrySet
import me.wietlol.bitblock.api.serialization.ModelSerializer
import me.wietlol.bitblock.codegenerator.data.models.DefaultBitModelType.Companion.blueprint
import me.wietlol.bitblock.codegenerator.data.models.BitModule
import me.wietlol.bitblock.codegenerator.generators.CodeGenerator
import me.wietlol.bitblock.codegenerator.generators.CodeGeneratorOptions
import me.wietlol.bitblock.codegenerator.utils.bitBlockVersion
import me.wietlol.bitblock.core.BitBlockBase
import me.wietlol.bitblock.core.registry.CommonModelRegistryKey
import me.wietlol.tomplot.core.writers.FileWriter
import me.wietlol.tomplot.core.writers.HashedWriter
import me.wietlol.tomplot.kotlin.builders.body
import me.wietlol.tomplot.kotlin.builders.ktComment
import me.wietlol.tomplot.kotlin.builders.ktDirectGenericTypeArgument
import me.wietlol.tomplot.kotlin.builders.ktFunction
import me.wietlol.tomplot.kotlin.builders.ktImport
import me.wietlol.tomplot.kotlin.builders.ktImportedTypeReference
import me.wietlol.tomplot.kotlin.builders.ktObject
import me.wietlol.tomplot.kotlin.builders.ktPackage
import me.wietlol.tomplot.kotlin.builders.ktParameter
import me.wietlol.tomplot.kotlin.builders.ktProperty
import me.wietlol.tomplot.kotlin.builders.ktRawCodeExpression
import me.wietlol.tomplot.kotlin.builders.ktStarGenericTypeArgument
import me.wietlol.tomplot.kotlin.builders.nullable
import me.wietlol.tomplot.kotlin.data.models.DefaultKtVisibility.Companion.private
import me.wietlol.tomplot.kotlin.engine.KotlinTomplotEngine
import me.wietlol.tomplot.kotlin.writers.KotlinFileExtractor
import me.wietlol.tomplot.kotlin.writers.KotlinStringWriter
import me.wietlol.tomplot.kotlin.writers.KotlinWriterOptions
import java.io.File

class BitModuleKotlinGenerator : CodeGenerator
{
	companion object : KotlinGeneratorHelper
	
	private val engine = KotlinTomplotEngine(
		KotlinStringWriter(KotlinWriterOptions())
			.let { HashedWriter(it) }
			.let { FileWriter(it, KotlinFileExtractor::extractFile) }
	)
	
	private val modelGenerator = KotlinModelGenerator(engine)
	private val builderGenerator = KotlinBuilderGenerator(engine)
	private val serializerGenerator = KotlinSerializerGenerator(engine)
	private val visitorGenerator = KotlinVisitorGenerator(engine)
	
	override fun generateCode(module: BitModule, root: File, options: CodeGeneratorOptions)
	{
		if (root.exists().not())
			throw IllegalArgumentException("Target folder does not exist. '${root.absolutePath}'")
		if (root.isDirectory.not())
			throw IllegalArgumentException("Target is not a folder. '${root.absolutePath}'")
		
		val newRoot = module.relativeRoot
			?.let { root.resolve(it).normalize() }
			?: root
		
		val apiRoot = module.relativeApiRoot
			?.let { newRoot.resolve(it).normalize() }
			?: newRoot
		
		val implRoot = module.relativeImplRoot
			?.let { newRoot.resolve(it).normalize() }
			?: newRoot
		
		options.logger("root:     ${newRoot.absolutePath}")
		options.logger("apiRoot:  ${apiRoot.absolutePath}")
		options.logger("implRoot: ${implRoot.absolutePath}")
		
		val processedModule: BitModule = MutabilityProcessor.addMutableBlueprints(module)
		
		generateMain(processedModule, implRoot, options)
		if (module.useExistingModels.not())
			modelGenerator.generateModels(processedModule, apiRoot, implRoot, options)
		builderGenerator.generateBuilders(processedModule, implRoot, options)
		serializerGenerator.generateSerializers(processedModule, implRoot, options)
		
		if (processedModule.annotations.findSingleByName("Visitor") != null)
			visitorGenerator.generateVisitor(processedModule, apiRoot, options)
	}
	
	private fun generateMain(bitModule: BitModule, implRoot: File, options: CodeGeneratorOptions)
	{
		val relativePath = bitModule.implRootPackage.replace(".", "/")
		val implFolder = implRoot.resolve(relativePath)
		
		options.logger("exporting module to                ${implFolder.absolutePath}")
		
		implFolder.mkdirs()
		
		generateInitializer(bitModule, implRoot, options)
	}
	
	private fun generateInitializer(bitModule: BitModule, implRoot: File, options: CodeGeneratorOptions)
	{
		engine.createScript(bitModule.module, implRoot) {
			ktComment("Generated by BitBlock version $bitBlockVersion")
			
			`package` = ktPackage(bitModule.implRootPackage)
			
			ktImport("${bitModule.implRootPackage}${bitModule.serializerPackage}.*")
			
			ktObject(bitModule.module) {
				superTypes.add(ktImportedTypeReference(RegistrySet::class))
				
				ktImportedTypeReference(CommonModelRegistryKey::class)
				
				val type = ktImportedTypeReference(Map::class, listOf(
					ktDirectGenericTypeArgument(ktImportedTypeReference(ModelRegistryKey::class)),
					ktDirectGenericTypeArgument(ktImportedTypeReference(ModelSerializer::class, listOf(
						ktStarGenericTypeArgument(),
						ktStarGenericTypeArgument(),
					))),
				))
				
				ktProperty(
					"modelSerializers",
					type,
					isOverride = true,
					initialValue = ktRawCodeExpression("createModelSerializers()")
				)
				
				ktFunction("createModelSerializers") {
					visibility = private
					returnType = type
					
					isExpressionBody = true
					body {
						appendLine("mapOf(")
						indented {
							bitModule
								.models
								.filter { it.type == blueprint }
								.filter { it.isMutable().not() }
								.toList()
								.forEach {
									append("CommonModelRegistryKey(\"${it.name}\", \"${bitModule.module}\", \"${bitModule.owner}\", \"${bitModule.version}\")")
									appendLine(" to ${it.name}Serializer,")
								}
						}
						appendLine(")")
					}
				}
				
				ktImportedTypeReference(BitBlockBase::class)
				ktFunction("initialize") {
					parameters = mutableListOf(
						ktParameter(
							"registry",
							ktImportedTypeReference(ModelRegistry::class).nullable()
						)
					)
					isOverride = true
					
					isExpressionBody = true
					body = mutableListOf(
						ktRawCodeExpression("modelSerializers.forEach((registry ?: BitBlockBase.modelRegistry)::set)")
					)
				}
			}
		}
	}
}
